/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Serialize, Deserialize};

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`modules_module_objects_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_audit_auditid_media_filename_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdAuditAuditidMediaFilenameGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_audit_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdAuditGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_media_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdMediaDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_media_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdMediaGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_media_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdMediaPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_media_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdMediaPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_media_type_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdMediaTypeDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_media_type_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdMediaTypeGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_media_type_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdMediaTypePutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdPatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsIdPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsPatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_objects_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleObjectsPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_operations_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleOperationsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_operations_name_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleOperationsNameGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_operations_name_run_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleOperationsNameRunPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modules_module_typeahead_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModulesModuleTypeaheadGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`multi_module_typeahead_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MultiModuleTypeaheadGetError {
    UnknownValue(serde_json::Value),
}


pub async fn modules_module_objects_delete(configuration: &configuration::Configuration, query: &str, module: &str) -> Result<(), Error<ModulesModuleObjectsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects", local_var_configuration.base_path, module=crate::apis::urlencode(module));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("query", &query.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ModulesModuleObjectsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_get(configuration: &configuration::Configuration, module: &str, fields: Option<Vec<String>>, embed: Option<Vec<String>>, offset: Option<i32>, limit: Option<i32>, sort: Option<Vec<String>>, query: Option<&str>, total_count: Option<bool>) -> Result<crate::models::InlineResponse200, Error<ModulesModuleObjectsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects", local_var_configuration.base_path, module=crate::apis::urlencode(module));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = embed {
        local_var_req_builder = local_var_req_builder.query(&[("embed", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = query {
        local_var_req_builder = local_var_req_builder.query(&[("query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = total_count {
        local_var_req_builder = local_var_req_builder.query(&[("totalCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModulesModuleObjectsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_audit_auditid_media_filename_get(configuration: &configuration::Configuration, module: &str, id: &str, auditid: &str, filename: &str) -> Result<crate::models::Resource, Error<ModulesModuleObjectsIdAuditAuditidMediaFilenameGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}/audit/{auditid}/media/{filename}", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id), auditid=crate::apis::urlencode(auditid), filename=crate::apis::urlencode(filename));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdAuditAuditidMediaFilenameGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_audit_get(configuration: &configuration::Configuration, module: &str, id: &str, offset: Option<i32>, count: Option<i32>, query: Option<&str>) -> Result<crate::models::AuditResult, Error<ModulesModuleObjectsIdAuditGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}/audit", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = count {
        local_var_req_builder = local_var_req_builder.query(&[("count", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query {
        local_var_req_builder = local_var_req_builder.query(&[("query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdAuditGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_delete(configuration: &configuration::Configuration, module: &str, id: &str) -> Result<(), Error<ModulesModuleObjectsIdDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_get(configuration: &configuration::Configuration, module: &str, id: &str, fields: Option<Vec<String>>, embed: Option<Vec<String>>) -> Result<::std::collections::HashMap<String, Vec<crate::models::CeType>>, Error<ModulesModuleObjectsIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = embed {
        local_var_req_builder = local_var_req_builder.query(&[("embed", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_media_delete(configuration: &configuration::Configuration, module: &str, id: &str, client_type: Option<&str>) -> Result<(), Error<ModulesModuleObjectsIdMediaDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}/media", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = client_type {
        local_var_req_builder = local_var_req_builder.query(&[("client_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdMediaDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_media_get(configuration: &configuration::Configuration, module: &str, id: &str, client_type: Option<&str>) -> Result<crate::models::OisOptions, Error<ModulesModuleObjectsIdMediaGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}/media", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = client_type {
        local_var_req_builder = local_var_req_builder.query(&[("client_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdMediaGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_media_post(configuration: &configuration::Configuration, module: &str, id: &str, client_type: Option<&str>, copy_or_reference_entity: Option<crate::models::CopyOrReferenceEntity>) -> Result<(), Error<ModulesModuleObjectsIdMediaPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}/media", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = client_type {
        local_var_req_builder = local_var_req_builder.query(&[("client_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&copy_or_reference_entity);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdMediaPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_media_put(configuration: &configuration::Configuration, module: &str, id: &str, client_type: Option<&str>, file: Option<std::path::PathBuf>) -> Result<(), Error<ModulesModuleObjectsIdMediaPutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}/media", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = client_type {
        local_var_req_builder = local_var_req_builder.query(&[("client_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'file' parameter
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdMediaPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_media_type_delete(configuration: &configuration::Configuration, module: &str, id: &str, _type: &str, client_type: Option<&str>, index: Option<i32>) -> Result<(), Error<ModulesModuleObjectsIdMediaTypeDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}/media/{type}", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id), type=crate::apis::urlencode(_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = client_type {
        local_var_req_builder = local_var_req_builder.query(&[("client_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = index {
        local_var_req_builder = local_var_req_builder.query(&[("index", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdMediaTypeDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_media_type_get(configuration: &configuration::Configuration, module: &str, id: &str, _type: &str, width: Option<i32>, height: Option<i32>, resize_fit: Option<&str>, quality: Option<i32>, crop_left: Option<f32>, crop_top: Option<f32>, crop_right: Option<f32>, crop_bottom: Option<f32>, dpi: Option<f32>, rotate: Option<f32>, flip: Option<&str>, orientation: Option<i32>, digital_rights: Option<&str>, frame: Option<f32>, client_type: Option<&str>, index: Option<i32>) -> Result<crate::models::Resource, Error<ModulesModuleObjectsIdMediaTypeGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}/media/{type}", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id), type=crate::apis::urlencode(_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = resize_fit {
        local_var_req_builder = local_var_req_builder.query(&[("resizeFit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_left {
        local_var_req_builder = local_var_req_builder.query(&[("cropLeft", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_top {
        local_var_req_builder = local_var_req_builder.query(&[("cropTop", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_right {
        local_var_req_builder = local_var_req_builder.query(&[("cropRight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_bottom {
        local_var_req_builder = local_var_req_builder.query(&[("cropBottom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = dpi {
        local_var_req_builder = local_var_req_builder.query(&[("dpi", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rotate {
        local_var_req_builder = local_var_req_builder.query(&[("rotate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = flip {
        local_var_req_builder = local_var_req_builder.query(&[("flip", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = orientation {
        local_var_req_builder = local_var_req_builder.query(&[("orientation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = digital_rights {
        local_var_req_builder = local_var_req_builder.query(&[("digitalRights", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = frame {
        local_var_req_builder = local_var_req_builder.query(&[("frame", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = client_type {
        local_var_req_builder = local_var_req_builder.query(&[("client_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = index {
        local_var_req_builder = local_var_req_builder.query(&[("index", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdMediaTypeGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_media_type_put(configuration: &configuration::Configuration, module: &str, id: &str, _type: &str, client_type: Option<&str>, index: Option<i32>, file: Option<std::path::PathBuf>) -> Result<(), Error<ModulesModuleObjectsIdMediaTypePutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}/media/{type}", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id), type=crate::apis::urlencode(_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = client_type {
        local_var_req_builder = local_var_req_builder.query(&[("client_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = index {
        local_var_req_builder = local_var_req_builder.query(&[("index", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'file' parameter
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdMediaTypePutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_patch(configuration: &configuration::Configuration, module: &str, id: &str) -> Result<(), Error<ModulesModuleObjectsIdPatchError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdPatchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_id_post(configuration: &configuration::Configuration, module: &str, id: &str) -> Result<(), Error<ModulesModuleObjectsIdPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects/{id}", local_var_configuration.base_path, module=crate::apis::urlencode(module), id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ModulesModuleObjectsIdPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_patch(configuration: &configuration::Configuration, module: &str, module_object: Option<Vec<crate::models::ModuleObject>>) -> Result<Vec<String>, Error<ModulesModuleObjectsPatchError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects", local_var_configuration.base_path, module=crate::apis::urlencode(module));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&module_object);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModulesModuleObjectsPatchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_objects_post(configuration: &configuration::Configuration, query: &str, module: &str, request_body: Option<::std::collections::HashMap<String, Vec<crate::models::CeType>>>) -> Result<(), Error<ModulesModuleObjectsPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/objects", local_var_configuration.base_path, module=crate::apis::urlencode(module));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("query", &query.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&request_body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ModulesModuleObjectsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_operations_get(configuration: &configuration::Configuration, module: &str, ids: Option<Vec<String>>, groups: Option<Vec<String>>, names: Option<Vec<String>>, _type: Option<Vec<String>>, relation_name: Option<&str>, view: Option<&str>, related_bean_id: Option<&str>) -> Result<Vec<crate::models::OperationBaseApi>, Error<ModulesModuleOperationsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/operations", local_var_configuration.base_path, module=crate::apis::urlencode(module));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ids {
        local_var_req_builder = local_var_req_builder.query(&[("ids", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = names {
        local_var_req_builder = local_var_req_builder.query(&[("names", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = _type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = relation_name {
        local_var_req_builder = local_var_req_builder.query(&[("relationName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = view {
        local_var_req_builder = local_var_req_builder.query(&[("view", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = related_bean_id {
        local_var_req_builder = local_var_req_builder.query(&[("relatedBeanId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModulesModuleOperationsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_operations_name_get(configuration: &configuration::Configuration, module: &str, name: &str, ids: Option<Vec<String>>, groups: Option<Vec<String>>, _type: Option<Vec<String>>, relation_name: Option<&str>, view: Option<&str>, related_bean_id: Option<&str>) -> Result<Vec<crate::models::OperationBaseApi>, Error<ModulesModuleOperationsNameGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/operations/{name}", local_var_configuration.base_path, module=crate::apis::urlencode(module), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ids {
        local_var_req_builder = local_var_req_builder.query(&[("ids", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = _type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = relation_name {
        local_var_req_builder = local_var_req_builder.query(&[("relationName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = view {
        local_var_req_builder = local_var_req_builder.query(&[("view", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = related_bean_id {
        local_var_req_builder = local_var_req_builder.query(&[("relatedBeanId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModulesModuleOperationsNameGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_operations_name_run_post(configuration: &configuration::Configuration, module: &str, name: &str, operations_run_request_body: Option<crate::models::OperationsRunRequestBody>) -> Result<::std::collections::HashMap<String, serde_json::Value>, Error<ModulesModuleOperationsNameRunPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/operations/{name}/run", local_var_configuration.base_path, module=crate::apis::urlencode(module), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&operations_run_request_body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModulesModuleOperationsNameRunPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn modules_module_typeahead_get(configuration: &configuration::Configuration, module: &str, value: Option<&str>, limit: Option<i32>, query: Option<&str>) -> Result<Vec<crate::models::ModuleObject>, Error<ModulesModuleTypeaheadGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/modules/{module}/typeahead", local_var_configuration.base_path, module=crate::apis::urlencode(module));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = value {
        local_var_req_builder = local_var_req_builder.query(&[("value", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query {
        local_var_req_builder = local_var_req_builder.query(&[("query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModulesModuleTypeaheadGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn multi_module_typeahead_get(configuration: &configuration::Configuration, value: Option<&str>) -> Result<Vec<crate::models::ModuleObject>, Error<MultiModuleTypeaheadGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/multi-module/typeahead", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = value {
        local_var_req_builder = local_var_req_builder.query(&[("value", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MultiModuleTypeaheadGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}


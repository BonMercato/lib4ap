/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Serialize, Deserialize};

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`upload_file`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadFileError {
    UnknownValue(serde_json::Value),
}


pub async fn upload_file(configuration: &configuration::Configuration, session: Option<&str>, file_id: Option<&str>, mount: Option<&str>, file_path: Option<&str>, file_data: Option<std::path::PathBuf>) -> Result<String, Error<UploadFileError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/service/filemanagement/upload", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    let mut local_var_form = reqwest::multipart::Form::new();
    if let Some(local_var_param_value) = session {
        local_var_form = local_var_form.text("session", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = file_id {
        local_var_form = local_var_form.text("fileId", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = mount {
        local_var_form = local_var_form.text("mount", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = file_path {
        local_var_form = local_var_form.text("filePath", local_var_param_value.to_string());
    }
    // TODO: support file upload for 'fileData' parameter
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UploadFileError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}


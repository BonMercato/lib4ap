/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OisOptions {
    #[serde(rename = "mediaTypes", skip_serializing_if = "Option::is_none")]
    pub media_types: Option<Vec<String>>,
    #[serde(rename = "ois", skip_serializing_if = "Option::is_none")]
    pub ois: Option<bool>,
    #[serde(rename = "reference", skip_serializing_if = "Option::is_none")]
    pub reference: Option<bool>,
    #[serde(rename = "copy", skip_serializing_if = "Option::is_none")]
    pub copy: Option<bool>,
    #[serde(rename = "upload", skip_serializing_if = "Option::is_none")]
    pub upload: Option<bool>,
    #[serde(rename = "delete", skip_serializing_if = "Option::is_none")]
    pub delete: Option<bool>,
    #[serde(rename = "copyModules", skip_serializing_if = "Option::is_none")]
    pub copy_modules: Option<Vec<String>>,
    #[serde(rename = "referenceModules", skip_serializing_if = "Option::is_none")]
    pub reference_modules: Option<::std::collections::HashMap<String, String>>,
}

impl OisOptions {
    pub fn new() -> OisOptions {
        OisOptions {
            media_types: None,
            ois: None,
            reference: None,
            copy: None,
            upload: None,
            delete: None,
            copy_modules: None,
            reference_modules: None,
        }
    }
}



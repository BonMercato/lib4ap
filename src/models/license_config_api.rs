/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LicenseConfigApi {
    #[serde(rename = "environments", skip_serializing_if = "Option::is_none")]
    pub environments: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "valid", skip_serializing_if = "Option::is_none")]
    pub valid: Option<bool>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl LicenseConfigApi {
    pub fn new() -> LicenseConfigApi {
        LicenseConfigApi {
            environments: None,
            valid: None,
            name: None,
        }
    }
}



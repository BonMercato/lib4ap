/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ApplicationWrapper {
    #[serde(rename = "artifactId")]
    pub artifact_id: String,
    #[serde(rename = "artifactVersion", skip_serializing_if = "Option::is_none")]
    pub artifact_version: Option<String>,
    #[serde(rename = "_objectType")]
    pub _object_type: String,
    #[serde(rename = "postInstallUrl", skip_serializing_if = "Option::is_none")]
    pub post_install_url: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "flavor", skip_serializing_if = "Option::is_none")]
    pub flavor: Option<String>,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "publishDate", skip_serializing_if = "Option::is_none")]
    pub publish_date: Option<String>,
    #[serde(rename = "installHook", skip_serializing_if = "Option::is_none")]
    pub install_hook: Option<String>,
    #[serde(rename = "preInstall", skip_serializing_if = "Option::is_none")]
    pub pre_install: Option<Box<crate::models::PreInstall>>,
    #[serde(rename = "infoUrl", skip_serializing_if = "Option::is_none")]
    pub info_url: Option<String>,
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<Box<crate::models::ErrorResponseItem>>,
    #[serde(rename = "updates", skip_serializing_if = "Option::is_none")]
    pub updates: Option<Vec<String>>,
    #[serde(rename = "updating", skip_serializing_if = "Option::is_none")]
    pub updating: Option<bool>,
    #[serde(rename = "updateStatus", skip_serializing_if = "Option::is_none")]
    pub update_status: Option<UpdateStatus>,
}

impl ApplicationWrapper {
    pub fn new(artifact_id: String, _object_type: String) -> ApplicationWrapper {
        ApplicationWrapper {
            artifact_id,
            artifact_version: None,
            _object_type,
            post_install_url: None,
            name: None,
            flavor: None,
            author: None,
            description: None,
            publish_date: None,
            install_hook: None,
            pre_install: None,
            info_url: None,
            error: None,
            updates: None,
            updating: None,
            update_status: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UpdateStatus {
    #[serde(rename = "noUpdateRequired")]
    NoUpdateRequired,
    #[serde(rename = "updateRequired")]
    UpdateRequired,
    #[serde(rename = "noCompatibleUpdate")]
    NoCompatibleUpdate,
    #[serde(rename = "applicationNotFound")]
    ApplicationNotFound,
    #[serde(rename = "installationRequired")]
    InstallationRequired,
}

impl Default for UpdateStatus {
    fn default() -> UpdateStatus {
        Self::NoUpdateRequired
    }
}


/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BaseRequestSearch {
    #[serde(rename = "session", skip_serializing_if = "Option::is_none")]
    pub session: Option<String>,
    #[serde(rename = "module_name", skip_serializing_if = "Option::is_none")]
    pub module_name: Option<String>,
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Vec<crate::models::SearchPropertyFilter>>,
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<Box<crate::models::INode>>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "fieldsAsArray", skip_serializing_if = "Option::is_none")]
    pub fields_as_array: Option<Vec<String>>,
    #[serde(rename = "filterList", skip_serializing_if = "Option::is_none")]
    pub filter_list: Option<Vec<crate::models::SearchPropertyFilter>>,
}

impl BaseRequestSearch {
    pub fn new() -> BaseRequestSearch {
        BaseRequestSearch {
            session: None,
            module_name: None,
            method: None,
            filter: None,
            query: None,
            parameters: None,
            fields_as_array: None,
            filter_list: None,
        }
    }
}



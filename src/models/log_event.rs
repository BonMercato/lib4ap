/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LogEvent {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "thread", skip_serializing_if = "Option::is_none")]
    pub thread: Option<String>,
    #[serde(rename = "classpath", skip_serializing_if = "Option::is_none")]
    pub classpath: Option<String>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "stacktrace", skip_serializing_if = "Option::is_none")]
    pub stacktrace: Option<String>,
}

impl LogEvent {
    pub fn new() -> LogEvent {
        LogEvent {
            _type: None,
            thread: None,
            classpath: None,
            message: None,
            stacktrace: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "WARN")]
    WARN,
    #[serde(rename = "ERROR")]
    ERROR,
}

impl Default for Type {
    fn default() -> Type {
        Self::WARN
    }
}


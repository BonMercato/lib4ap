/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CeType {
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
    #[serde(rename = "dimensions", skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "instruction", skip_serializing_if = "Option::is_none")]
    pub instruction: Option<Instruction>,
}

impl CeType {
    pub fn new() -> CeType {
        CeType {
            value: None,
            dimensions: None,
            instruction: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Instruction {
    #[serde(rename = "overwrite")]
    Overwrite,
    #[serde(rename = "if_empty")]
    IfEmpty,
    #[serde(rename = "list_add")]
    ListAdd,
    #[serde(rename = "list_add_force")]
    ListAddForce,
    #[serde(rename = "list_remove")]
    ListRemove,
}

impl Default for Instruction {
    fn default() -> Instruction {
        Self::Overwrite
    }
}


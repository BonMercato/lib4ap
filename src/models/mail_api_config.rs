/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MailApiConfig {
    #[serde(rename = "environments", skip_serializing_if = "Option::is_none")]
    pub environments: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "valid", skip_serializing_if = "Option::is_none")]
    pub valid: Option<bool>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::JsonNullableString>>,
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<Box<crate::models::JsonNullableString>>,
    #[serde(rename = "useAuthentication", skip_serializing_if = "Option::is_none")]
    pub use_authentication: Option<bool>,
    #[serde(rename = "useReplyTo", skip_serializing_if = "Option::is_none")]
    pub use_reply_to: Option<bool>,
    #[serde(rename = "systemFromEmail", skip_serializing_if = "Option::is_none")]
    pub system_from_email: Option<String>,
    #[serde(rename = "systemFromName", skip_serializing_if = "Option::is_none")]
    pub system_from_name: Option<String>,
    #[serde(rename = "systemReplyToEmail", skip_serializing_if = "Option::is_none")]
    pub system_reply_to_email: Option<Box<crate::models::JsonNullableString>>,
    #[serde(rename = "systemMailSender", skip_serializing_if = "Option::is_none")]
    pub system_mail_sender: Option<Box<crate::models::JsonNullableString>>,
    #[serde(rename = "security", skip_serializing_if = "Option::is_none")]
    pub security: Option<Security>,
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<::std::collections::HashMap<String, String>>,
}

impl MailApiConfig {
    pub fn new() -> MailApiConfig {
        MailApiConfig {
            environments: None,
            valid: None,
            enabled: None,
            host: None,
            user: None,
            password: None,
            use_authentication: None,
            use_reply_to: None,
            system_from_email: None,
            system_from_name: None,
            system_reply_to_email: None,
            system_mail_sender: None,
            security: None,
            port: None,
            name: None,
            parameters: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Security {
    #[serde(rename = "tls")]
    Tls,
    #[serde(rename = "starttls")]
    Starttls,
    #[serde(rename = "ssl")]
    Ssl,
    #[serde(rename = "none")]
    None,
}

impl Default for Security {
    fn default() -> Security {
        Self::Tls
    }
}


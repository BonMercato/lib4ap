/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InstallationConfigFileComparison {
    #[serde(rename = "comparison", skip_serializing_if = "Option::is_none")]
    pub comparison: Option<Comparison>,
    #[serde(rename = "remote", skip_serializing_if = "Option::is_none")]
    pub remote: Option<Box<crate::models::InstallationConfigFile>>,
    #[serde(rename = "local", skip_serializing_if = "Option::is_none")]
    pub local: Option<Box<crate::models::InstallationConfigFile>>,
}

impl InstallationConfigFileComparison {
    pub fn new() -> InstallationConfigFileComparison {
        InstallationConfigFileComparison {
            comparison: None,
            remote: None,
            local: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Comparison {
    #[serde(rename = "EQUAL")]
    EQUAL,
    #[serde(rename = "REMOTE_NEWER")]
    REMOTENEWER,
    #[serde(rename = "REMOTE_NOT_EXIST")]
    REMOTENOTEXIST,
    #[serde(rename = "LOCAL_NEWER")]
    LOCALNEWER,
    #[serde(rename = "LOCAL_NOT_EXIST")]
    LOCALNOTEXIST,
}

impl Default for Comparison {
    fn default() -> Comparison {
        Self::EQUAL
    }
}


/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AuditEventBeanResult {
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "relatedId", skip_serializing_if = "Option::is_none")]
    pub related_id: Option<Box<crate::models::JsonNullableString>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "objectId")]
    pub object_id: String,
    #[serde(rename = "createBy", skip_serializing_if = "Option::is_none")]
    pub create_by: Option<String>,
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    #[serde(rename = "valueOld", skip_serializing_if = "Option::is_none")]
    pub value_old: Option<Box<crate::models::CeType>>,
    #[serde(rename = "valueNew", skip_serializing_if = "Option::is_none")]
    pub value_new: Option<Box<crate::models::CeType>>,
    #[serde(rename = "fieldName", skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    #[serde(rename = "dimensions", skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl AuditEventBeanResult {
    pub fn new(id: i64, object_id: String) -> AuditEventBeanResult {
        AuditEventBeanResult {
            id,
            related_id: None,
            _type: None,
            object_id,
            create_by: None,
            create_time: None,
            value_old: None,
            value_new: None,
            field_name: None,
            dimensions: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "initial")]
    Initial,
    #[serde(rename = "field")]
    Field,
    #[serde(rename = "object_image_delete")]
    ObjectImageDelete,
    #[serde(rename = "object_image_upload")]
    ObjectImageUpload,
    #[serde(rename = "object_image_copy")]
    ObjectImageCopy,
}

impl Default for Type {
    fn default() -> Type {
        Self::Initial
    }
}


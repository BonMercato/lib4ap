/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DatabaseApiConfig {
    #[serde(rename = "environments", skip_serializing_if = "Option::is_none")]
    pub environments: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "databaseName", skip_serializing_if = "Option::is_none")]
    pub database_name: Option<String>,
    #[serde(rename = "maxIdleTime", skip_serializing_if = "Option::is_none")]
    pub max_idle_time: Option<i32>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "valid", skip_serializing_if = "Option::is_none")]
    pub valid: Option<bool>,
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "minPoolSize", skip_serializing_if = "Option::is_none")]
    pub min_pool_size: Option<i32>,
    #[serde(rename = "balancerType", skip_serializing_if = "Option::is_none")]
    pub balancer_type: Option<String>,
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    #[serde(rename = "integratedSecurity", skip_serializing_if = "Option::is_none")]
    pub integrated_security: Option<bool>,
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(rename = "jdbcUrl", skip_serializing_if = "Option::is_none")]
    pub jdbc_url: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "maxPoolSize", skip_serializing_if = "Option::is_none")]
    pub max_pool_size: Option<i32>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(rename = "slowQueryLoggingEnabled", skip_serializing_if = "Option::is_none")]
    pub slow_query_logging_enabled: Option<bool>,
    #[serde(rename = "slowQueryLoggingThresholdMilliseconds", skip_serializing_if = "Option::is_none")]
    pub slow_query_logging_threshold_milliseconds: Option<i32>,
    #[serde(rename = "slowQueryLoggingStatementExclusionRegexes", skip_serializing_if = "Option::is_none")]
    pub slow_query_logging_statement_exclusion_regexes: Option<Vec<String>>,
}

impl DatabaseApiConfig {
    pub fn new() -> DatabaseApiConfig {
        DatabaseApiConfig {
            environments: None,
            database_name: None,
            max_idle_time: None,
            _type: None,
            valid: None,
            password: None,
            min_pool_size: None,
            balancer_type: None,
            port: None,
            integrated_security: None,
            host: None,
            jdbc_url: None,
            name: None,
            max_pool_size: None,
            parameters: None,
            user: None,
            slow_query_logging_enabled: None,
            slow_query_logging_threshold_milliseconds: None,
            slow_query_logging_statement_exclusion_regexes: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "mysql")]
    Mysql,
    #[serde(rename = "mariadb")]
    Mariadb,
    #[serde(rename = "sqlserver")]
    Sqlserver,
    #[serde(rename = "unknown")]
    Unknown,
}

impl Default for Type {
    fn default() -> Type {
        Self::Mysql
    }
}


/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FieldConfig4ModuleConfig {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "length", skip_serializing_if = "Option::is_none")]
    pub length: Option<i32>,
    #[serde(rename = "scale", skip_serializing_if = "Option::is_none")]
    pub scale: Option<i32>,
    #[serde(rename = "precision", skip_serializing_if = "Option::is_none")]
    pub precision: Option<i32>,
    #[serde(rename = "audit", skip_serializing_if = "Option::is_none")]
    pub audit: Option<bool>,
    #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
    pub default_value: Option<String>,
    #[serde(rename = "metric", skip_serializing_if = "Option::is_none")]
    pub metric: Option<Box<crate::models::MetricConfig>>,
    #[serde(rename = "valueOptionKey", skip_serializing_if = "Option::is_none")]
    pub value_option_key: Option<String>,
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "info", skip_serializing_if = "Option::is_none")]
    pub info: Option<String>,
    #[serde(rename = "modules", skip_serializing_if = "Option::is_none")]
    pub modules: Option<Vec<String>>,
    #[serde(rename = "relatedModule", skip_serializing_if = "Option::is_none")]
    pub related_module: Option<String>,
    #[serde(rename = "dimensions", skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<Vec<String>>,
}

impl FieldConfig4ModuleConfig {
    pub fn new() -> FieldConfig4ModuleConfig {
        FieldConfig4ModuleConfig {
            name: None,
            _type: None,
            length: None,
            scale: None,
            precision: None,
            audit: None,
            default_value: None,
            metric: None,
            value_option_key: None,
            label: None,
            info: None,
            modules: None,
            related_module: None,
            dimensions: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "CEBoolean")]
    CEBoolean,
    #[serde(rename = "CEBooleanList")]
    CEBooleanList,
    #[serde(rename = "CEDate")]
    CEDate,
    #[serde(rename = "CEDateList")]
    CEDateList,
    #[serde(rename = "CEEmail")]
    CEEmail,
    #[serde(rename = "CEEmailList")]
    CEEmailList,
    #[serde(rename = "CEEnum")]
    CEEnum,
    #[serde(rename = "CEId")]
    CEId,
    #[serde(rename = "CEIdList")]
    CEIdList,
    #[serde(rename = "CEInteger")]
    CEInteger,
    #[serde(rename = "CEIntegerList")]
    CEIntegerList,
    #[serde(rename = "CELong")]
    CELong,
    #[serde(rename = "CELongList")]
    CELongList,
    #[serde(rename = "CEIdentity")]
    CEIdentity,
    #[serde(rename = "CEIdentityList")]
    CEIdentityList,
    #[serde(rename = "CEText")]
    CEText,
    #[serde(rename = "CETextList")]
    CETextList,
    #[serde(rename = "CETimestamp")]
    CETimestamp,
    #[serde(rename = "CETimestampList")]
    CETimestampList,
    #[serde(rename = "CEVarchar")]
    CEVarchar,
    #[serde(rename = "CEVarcharList")]
    CEVarcharList,
    #[serde(rename = "CEObjectLink")]
    CEObjectLink,
    #[serde(rename = "CEObjectLinkList")]
    CEObjectLinkList,
    #[serde(rename = "CEExternalObjectLink")]
    CEExternalObjectLink,
    #[serde(rename = "CEExternalObjectLinkList")]
    CEExternalObjectLinkList,
    #[serde(rename = "CEDouble")]
    CEDouble,
    #[serde(rename = "CEDoubleList")]
    CEDoubleList,
    #[serde(rename = "CEFloat")]
    CEFloat,
    #[serde(rename = "CEFloatList")]
    CEFloatList,
    #[serde(rename = "CEExternalId")]
    CEExternalId,
    #[serde(rename = "CEExternalIdList")]
    CEExternalIdList,
    #[serde(rename = "CEAdditionalPermission")]
    CEAdditionalPermission,
    #[serde(rename = "CEAdditionalPermissionList")]
    CEAdditionalPermissionList,
    #[serde(rename = "CEMetric")]
    CEMetric,
    #[serde(rename = "CEMetricList")]
    CEMetricList,
}

impl Default for Type {
    fn default() -> Type {
        Self::CEBoolean
    }
}


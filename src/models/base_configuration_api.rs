/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BaseConfigurationApi {
    #[serde(rename = "licenseConfig", skip_serializing_if = "Option::is_none")]
    pub license_config: Option<Box<crate::models::LicenseConfigApi>>,
    #[serde(rename = "databaseConfig", skip_serializing_if = "Option::is_none")]
    pub database_config: Option<Box<crate::models::DatabaseApiConfig>>,
    #[serde(rename = "generalConfig", skip_serializing_if = "Option::is_none")]
    pub general_config: Option<Box<crate::models::GeneralConfigApi>>,
    #[serde(rename = "mailConfig", skip_serializing_if = "Option::is_none")]
    pub mail_config: Option<Box<crate::models::MailApiConfig>>,
}

impl BaseConfigurationApi {
    pub fn new() -> BaseConfigurationApi {
        BaseConfigurationApi {
            license_config: None,
            database_config: None,
            general_config: None,
            mail_config: None,
        }
    }
}



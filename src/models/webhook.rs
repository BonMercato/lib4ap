/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Webhook {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "header", skip_serializing_if = "Option::is_none")]
    pub header: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<crate::models::WebhookEvent>>,
    #[serde(rename = "eventsJSON", skip_serializing_if = "Option::is_none")]
    pub events_json: Option<String>,
}

impl Webhook {
    pub fn new(url: String) -> Webhook {
        Webhook {
            id: None,
            active: None,
            url,
            header: None,
            secret: None,
            events: None,
            events_json: None,
        }
    }
}



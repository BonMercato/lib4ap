/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GroupRenderer {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "default_open", skip_serializing_if = "Option::is_none")]
    pub default_open: Option<bool>,
    #[serde(rename = "tooltip", skip_serializing_if = "Option::is_none")]
    pub tooltip: Option<String>,
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "field_renderer", skip_serializing_if = "Option::is_none")]
    pub field_renderer: Option<Vec<crate::models::FieldRenderer>>,
}

impl GroupRenderer {
    pub fn new() -> GroupRenderer {
        GroupRenderer {
            _type: None,
            default_open: None,
            tooltip: None,
            label: None,
            field_renderer: None,
        }
    }
}



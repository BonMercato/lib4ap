/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ModuleConfig {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "labelSingular", skip_serializing_if = "Option::is_none")]
    pub label_singular: Option<String>,
    #[serde(rename = "labelPlural", skip_serializing_if = "Option::is_none")]
    pub label_plural: Option<String>,
    #[serde(rename = "info", skip_serializing_if = "Option::is_none")]
    pub info: Option<String>,
    #[serde(rename = "menuEntry", skip_serializing_if = "Option::is_none")]
    pub menu_entry: Option<MenuEntry>,
    #[serde(rename = "create", skip_serializing_if = "Option::is_none")]
    pub create: Option<bool>,
    #[serde(rename = "onlyFriendlyname", skip_serializing_if = "Option::is_none")]
    pub only_friendlyname: Option<bool>,
    #[serde(rename = "objectImage", skip_serializing_if = "Option::is_none")]
    pub object_image: Option<bool>,
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<crate::models::ModuleConfigField>>,
    #[serde(rename = "dimensions", skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<Vec<crate::models::DimensionFieldConfig>>,
    #[serde(rename = "additionalPermissions", skip_serializing_if = "Option::is_none")]
    pub additional_permissions: Option<Vec<String>>,
}

impl ModuleConfig {
    pub fn new() -> ModuleConfig {
        ModuleConfig {
            name: None,
            label: None,
            label_singular: None,
            label_plural: None,
            info: None,
            menu_entry: None,
            create: None,
            only_friendlyname: None,
            object_image: None,
            fields: None,
            dimensions: None,
            additional_permissions: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MenuEntry {
    #[serde(rename = "yes")]
    Yes,
    #[serde(rename = "no")]
    No,
}

impl Default for MenuEntry {
    fn default() -> MenuEntry {
        Self::Yes
    }
}


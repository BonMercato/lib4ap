/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConditionCompare {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "values", skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
    #[serde(rename = "dimensions", skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<::std::collections::HashMap<String, Vec<serde_json::Value>>>,
}

impl ConditionCompare {
    pub fn new() -> ConditionCompare {
        ConditionCompare {
            _type: None,
            values: None,
            dimensions: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "VALUE")]
    VALUE,
    #[serde(rename = "FIELD")]
    FIELD,
    #[serde(rename = "VARIABLE")]
    VARIABLE,
    #[serde(rename = "PERMISSION")]
    PERMISSION,
    #[serde(rename = "FEATURE")]
    FEATURE,
    #[serde(rename = "PRESET")]
    PRESET,
}

impl Default for Type {
    fn default() -> Type {
        Self::VALUE
    }
}


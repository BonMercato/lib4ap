/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RequestSingle {
    #[serde(rename = "session", skip_serializing_if = "Option::is_none")]
    pub session: Option<String>,
    #[serde(rename = "module_name", skip_serializing_if = "Option::is_none")]
    pub module_name: Option<String>,
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(rename = "relations", skip_serializing_if = "Option::is_none")]
    pub relations: Option<Vec<String>>,
    #[serde(rename = "parameter", skip_serializing_if = "Option::is_none")]
    pub parameter: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "fieldsAsArray", skip_serializing_if = "Option::is_none")]
    pub fields_as_array: Option<Vec<String>>,
}

impl RequestSingle {
    pub fn new() -> RequestSingle {
        RequestSingle {
            session: None,
            module_name: None,
            method: None,
            relations: None,
            parameter: None,
            fields_as_array: None,
        }
    }
}



/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FeatureOrPresetAdminEntry {
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(rename = "keyBaseModules", skip_serializing_if = "Option::is_none")]
    pub key_base_modules: Option<String>,
    #[serde(rename = "module", skip_serializing_if = "Option::is_none")]
    pub module: Option<String>,
    #[serde(rename = "clientType", skip_serializing_if = "Option::is_none")]
    pub client_type: Option<ClientType>,
    #[serde(rename = "valueOption", skip_serializing_if = "Option::is_none")]
    pub value_option: Option<String>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "presetType", skip_serializing_if = "Option::is_none")]
    pub preset_type: Option<PresetType>,
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
    #[serde(rename = "confXml", skip_serializing_if = "Option::is_none")]
    pub conf_xml: Option<Box<crate::models::FeatureAndPresetAdminConf>>,
    #[serde(rename = "confRole", skip_serializing_if = "Option::is_none")]
    pub conf_role: Option<Box<crate::models::FeatureAndPresetAdminConf>>,
}

impl FeatureOrPresetAdminEntry {
    pub fn new() -> FeatureOrPresetAdminEntry {
        FeatureOrPresetAdminEntry {
            key: None,
            key_base_modules: None,
            module: None,
            client_type: None,
            value_option: None,
            group: None,
            id: None,
            preset_type: None,
            order: None,
            conf_xml: None,
            conf_role: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ClientType {
    #[serde(rename = "All")]
    All,
    #[serde(rename = "System")]
    System,
    #[serde(rename = "Web")]
    Web,
    #[serde(rename = "Tablet")]
    Tablet,
    #[serde(rename = "Phone")]
    Phone,
    #[serde(rename = "Desktop")]
    Desktop,
    #[serde(rename = "JavaAPI")]
    JavaAPI,
    #[serde(rename = "Application_Plugin")]
    ApplicationPlugin,
    #[serde(rename = "External")]
    External,
    #[serde(rename = "Web3")]
    Web3,
}

impl Default for ClientType {
    fn default() -> ClientType {
        Self::All
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PresetType {
    #[serde(rename = "FEATURE_PERMISSION")]
    FEATUREPERMISSION,
    #[serde(rename = "PRESET")]
    PRESET,
}

impl Default for PresetType {
    fn default() -> PresetType {
        Self::FEATUREPERMISSION
    }
}


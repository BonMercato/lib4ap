/*
 * 4ALLPORTAL REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: support@4allportal.net
 * Generated by: https://openapi-generator.tech
 */

use serde::{Serialize, Deserialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FeatureAndPresetAdminConf {
    #[serde(rename = "adminAccess", skip_serializing_if = "Option::is_none")]
    pub admin_access: Option<AdminAccess>,
    #[serde(rename = "userAccess", skip_serializing_if = "Option::is_none")]
    pub user_access: Option<UserAccess>,
    #[serde(rename = "valueType", skip_serializing_if = "Option::is_none")]
    pub value_type: Option<ValueType>,
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
}

impl FeatureAndPresetAdminConf {
    pub fn new() -> FeatureAndPresetAdminConf {
        FeatureAndPresetAdminConf {
            admin_access: None,
            user_access: None,
            value_type: None,
            value: None,
            parent_id: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AdminAccess {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "edit")]
    Edit,
}

impl Default for AdminAccess {
    fn default() -> AdminAccess {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UserAccess {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "edit")]
    Edit,
}

impl Default for UserAccess {
    fn default() -> UserAccess {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ValueType {
    #[serde(rename = "CEVarchar")]
    CEVarchar,
    #[serde(rename = "CEText")]
    CEText,
    #[serde(rename = "CEBoolean")]
    CEBoolean,
    #[serde(rename = "CEDouble")]
    CEDouble,
}

impl Default for ValueType {
    fn default() -> ValueType {
        Self::CEVarchar
    }
}

